Index: Mesbackend/CommonUtils/src/main/java/com/job/common/redis/FastJsonRedisSerializer.java
===================================================================
diff --git a/Mesbackend/CommonUtils/src/main/java/com/job/common/redis/FastJsonRedisSerializer.java b/Mesbackend/CommonUtils/src/main/java/com/job/common/redis/FastJsonRedisSerializer.java
deleted file mode 100644
--- a/Mesbackend/CommonUtils/src/main/java/com/job/common/redis/FastJsonRedisSerializer.java	(revision aee096cc53f21d1e3e1e1ddb9bb9cbb675c53ab6)
+++ /dev/null	(revision aee096cc53f21d1e3e1e1ddb9bb9cbb675c53ab6)
@@ -1,68 +0,0 @@
-package com.job.common.redis;
-
-import com.alibaba.fastjson.JSON;
-import com.alibaba.fastjson.parser.ParserConfig;
-import com.alibaba.fastjson.serializer.SerializerFeature;
-import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.type.TypeFactory;
-import org.springframework.data.redis.serializer.RedisSerializer;
-import org.springframework.data.redis.serializer.SerializationException;
-
-import java.nio.charset.Charset;
-
-/**
- * Redis使用FastJson序列化
- *  FastJson 序列化和反序列化对象的 RedisSerializer 实现类。它实现了 RedisSerializer 接口，用于在 Redis 上存储和获取对象。
- * @author sg
- */
-public class FastJsonRedisSerializer<T> implements RedisSerializer<T>
-{
-
-//    设置编码格式
-    public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");
-
-    private Class<T> clazz;
-
-//    使用了 FastJson 的 ParserConfig，将自动类型支持设置为 true，以支持反序列化时的自动类型转换。
-    static
-    {
-        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
-    }
-
-    public FastJsonRedisSerializer(Class<T> clazz)
-    {
-        super();
-        this.clazz = clazz;
-    }
-
-
-//    方法将对象 t 序列化为字节数组。如果传入的对象为 null，返回一个空字节数组；否则，使用 FastJson 的 toJSONString 方法将对象转换为 JSON 字符串，并将其转换为字节数组。
-    @Override
-    public byte[] serialize(T t) throws SerializationException
-    {
-        if (t == null)
-        {
-            return new byte[0];
-        }
-        return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);
-    }
-
-//    方法将字节数组 bytes 反序列化为对象。如果传入的字节数组为 null 或长度为 0，返回 null；否则，将字节数组转换为字符串，并使用 FastJson 的 parseObject 方法将字符串解析为对象。
-    @Override
-    public T deserialize(byte[] bytes) throws SerializationException
-    {
-        if (bytes == null || bytes.length <= 0)
-        {
-            return null;
-        }
-        String str = new String(bytes, DEFAULT_CHARSET);
-
-        return JSON.parseObject(str, clazz);
-    }
-
-// 返回一个 JavaType 对象，用于将 Class 对象转换为 FastJson 中的 JavaType。
-    protected JavaType getJavaType(Class<?> clazz)
-    {
-        return TypeFactory.defaultInstance().constructType(clazz);
-    }
-}
\ No newline at end of file
Index: Mesbackend/CommonUtils/src/main/java/com/job/common/redis/RedisConfig.java
===================================================================
diff --git a/Mesbackend/CommonUtils/src/main/java/com/job/common/redis/RedisConfig.java b/Mesbackend/CommonUtils/src/main/java/com/job/common/redis/RedisConfig.java
deleted file mode 100644
--- a/Mesbackend/CommonUtils/src/main/java/com/job/common/redis/RedisConfig.java	(revision aee096cc53f21d1e3e1e1ddb9bb9cbb675c53ab6)
+++ /dev/null	(revision aee096cc53f21d1e3e1e1ddb9bb9cbb675c53ab6)
@@ -1,39 +0,0 @@
-package com.job.common.redis;
-
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Configuration;
-import org.springframework.data.redis.connection.RedisConnectionFactory;
-import org.springframework.data.redis.core.RedisTemplate;
-import org.springframework.data.redis.serializer.StringRedisSerializer;
-
-//用于配置 RedisTemplate 的 RedisConfig 类。在这个类中，你可以设置 RedisTemplate 的序列化方式、连接工厂等配置。
-@Configuration
-public class RedisConfig {
-
-    @Bean
-    @SuppressWarnings(value = { "unchecked", "rawtypes" })
-    public RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory connectionFactory)
-    {
-//        创建redistemplate对象
-        RedisTemplate<Object, Object> template = new RedisTemplate<>();
-//        将连接工厂设置到redistemplate中以便与redis通信
-        template.setConnectionFactory(connectionFactory);
-//        创建一个 FastJsonRedisSerializer 对象，并将其中传入的 Class 设置为 Object.class，表示要序列化和反序列化的对象类型是 Object。
-        FastJsonRedisSerializer serializer = new FastJsonRedisSerializer(Object.class);
-
-//        使用StringRedisSerializer来序列化和反序列化redis的key值
-//        设置键的序列化器为 StringRedisSerializer
-        template.setKeySerializer(new StringRedisSerializer());
-//        使用 setHashValueSerializer 方法设置哈希值的序列化器为上面创建的 FastJsonRedisSerializer。
-        template.setValueSerializer(serializer);
-
-        // Hash的key也采用StringRedisSerializer的序列化方式
-        template.setHashKeySerializer(new StringRedisSerializer());
-        template.setHashValueSerializer(serializer);
-
-//      afterPropertiesSet() 方法用于确保 RedisTemplate 的所有属性都已经设置完毕，并作为重要的初始化步骤。该方法会执行一些必要的校验和配置，并保证 RedisTemplate 可以正常运行。
-        template.afterPropertiesSet();
-        return template;
-    }
-}
-
Index: Mesbackend/CommonUtils/src/main/java/com/job/common/redis/RedisCache.java
===================================================================
diff --git a/Mesbackend/CommonUtils/src/main/java/com/job/common/redis/RedisCache.java b/Mesbackend/CommonUtils/src/main/java/com/job/common/redis/RedisCache.java
deleted file mode 100644
--- a/Mesbackend/CommonUtils/src/main/java/com/job/common/redis/RedisCache.java	(revision aee096cc53f21d1e3e1e1ddb9bb9cbb675c53ab6)
+++ /dev/null	(revision aee096cc53f21d1e3e1e1ddb9bb9cbb675c53ab6)
@@ -1,258 +0,0 @@
-package com.job.common.redis;
-
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.data.redis.core.BoundSetOperations;
-import org.springframework.data.redis.core.HashOperations;
-import org.springframework.data.redis.core.RedisTemplate;
-import org.springframework.data.redis.core.ValueOperations;
-import org.springframework.stereotype.Component;
-
-import java.util.*;
-import java.util.concurrent.TimeUnit;
-
-@SuppressWarnings(value = { "unchecked", "rawtypes" })
-
-@Component
-public class RedisCache
-{
-    @Autowired
-    public RedisTemplate redisTemplate;
-
-
-    /**
-     * 缓存基本的对象，Integer、String、实体类等
-     *s
-     * @param key 缓存的键值
-     * @param value 缓存的值
-     */
-    public <T> void setCacheObject(final String key, final T value)
-    {
-        redisTemplate.opsForValue().set(key, value);
-    }
-
-    /**
-     * 缓存基本的对象，Integer、String、实体类等
-     *
-     * @param key 缓存的键值
-     * @param value 缓存的值
-     * @param timeout 时间
-     * @param timeUnit 时间颗粒度
-     */
-    public <T> void setCacheObject(final String key, final T value, final Integer timeout, final TimeUnit timeUnit)
-    {
-        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);
-    }
-
-    /**
-     * 设置有效时间
-     *
-     * @param key Redis键
-     * @param timeout 超时时间
-     * @return true=设置成功；false=设置失败
-     * 时间单位是秒
-     */
-    public boolean expire(final String key, final long timeout)
-    {
-        return expire(key, timeout, TimeUnit.SECONDS);
-    }
-
-    /**
-//     * 设置有效时间
-     *
-     * @param key Redis键
-     * @param timeout 超时时间
-     * @param unit 时间单位可以随便设置
-     * @return true=设置成功；false=设置失败
-     */
-    public boolean expire(final String key, final long timeout, final TimeUnit unit)
-        {
-            return redisTemplate.expire(key, timeout, unit);
-        }
-
-    /**
-     * 获得缓存的基本对象。
-     *
-     * @param key 缓存键值
-     * @return 缓存键值对应的数据
-     */
-    public <T> T getCacheObject(final String key)
-    {
-        ValueOperations<String, T> operation = redisTemplate.opsForValue();
-        return operation.get(key);
-    }
-
-    /**
-     * 删除单个对象
-     *
-     * @param key
-     */
-    public boolean deleteObject(final String key)
-    {
-        return redisTemplate.delete(key);
-    }
-
-    /**
-     * 删除集合对象
-     *
-     * @param collection 多个对象
-     * @return
-     */
-    public long deleteObject(final Collection collection)
-    {
-        return redisTemplate.delete(collection);
-    }
-
-    /**
-     * 缓存List数据
-     *
-     * @param key 缓存的键值
-     * @param dataList 待缓存的List数据
-     * @return 缓存的对象
-     */
-    public <T> long setCacheList(final String key, final List<T> dataList)
-    {
-        Long count = redisTemplate.opsForList().rightPushAll(key, dataList);
-        return count == null ? 0 : count;
-    }
-
-    /**
-     * 获得缓存的list对象
-     *
-     * @param key 缓存的键值
-     * @return 缓存键值对应的数据
-     */
-    public <T> List<T> getCacheList(final String key)
-    {
-        return redisTemplate.opsForList().range(key, 0, -1);
-    }
-
-    /**
-     * 缓存Set
-     *
-     * @param key 缓存键值
-     * @param dataSet 缓存的数据
-     * @return 缓存数据的对象
-     */
-    public <T> BoundSetOperations<String, T> setCacheSet(final String key, final Set<T> dataSet)
-    {
-        BoundSetOperations<String, T> setOperation = redisTemplate.boundSetOps(key);
-        Iterator<T> it = dataSet.iterator();
-        while (it.hasNext())
-        {
-            setOperation.add(it.next());
-        }
-        return setOperation;
-    }
-
-    /**
-     * 获得缓存的set
-     *
-     * @param key
-     * @return
-     */
-    public <T> Set<T> getCacheSet(final String key)
-    {
-        return redisTemplate.opsForSet().members(key);
-    }
-
-    /**
-     * 缓存Map
-     *批量添加到hash数据的方法
-     * @param key
-     * @param dataMap
-     */
-    public <T> void setCacheMap(final String key, final Map<String, T> dataMap)
-    {
-        if (dataMap != null) {
-            redisTemplate.opsForHash().putAll(key, dataMap);
-        }
-    }
-
-    /**
-     * 获得缓存的Map
-     *
-     * @param key
-     * @return
-     */
-    public <T> Map<String, T> getCacheMap(final String key)
-    {
-        return redisTemplate.opsForHash().entries(key);
-    }
-
-    /**
-     * 往Hash中存入数据
-     *
-     * @param key Redis键
-     * @param hKey Hash键
-     * @param value 值
-     */
-    public <T> void setCacheMapValue(final String key, final String hKey, final T value)
-    {
-        redisTemplate.opsForHash().put(key, hKey, value);
-    }
-
-//    添加数据分类
-    public <T> void addList(final String hKey, final T value){
-        redisTemplate.opsForHash().put("list",hKey,value);
-    }
-
-
-    /**
-     * 获取Hash中的数据
-     *
-     * @param key Redis键
-     * @param hKey Hash键
-     * @return Hash中的对象
-     */
-    public <T> T getCacheMapValue(final String key, final String hKey)
-    {
-        HashOperations<String, String, T> opsForHash = redisTemplate.opsForHash();
-        return opsForHash.get(key, hKey);
-    }
-
-    /**
-     * 删除Hash中的数据
-     *
-     * @param key
-     * @param hkey
-     */
-    public void delCacheMapValue(final String key, final String hkey)
-    {
-        HashOperations hashOperations = redisTemplate.opsForHash();
-        hashOperations.delete(key, hkey);
-    }
-
-    /**
-     * 获取多个Hash中的数据
-     *
-     * @param key Redis键
-     * @param hKeys Hash键集合
-     * @return Hash对象集合
-     */
-    public <T> List<T> getMultiCacheMapValue(final String key, final Collection<Object> hKeys)
-    {
-        return redisTemplate.opsForHash().multiGet(key, hKeys);
-    }
-
-    /**
-     * 获得缓存的基本对象列表
-     *
-     * @param pattern 字符串前缀
-     * @return 对象列表
-     */
-    public Collection<String> keys(final String pattern)
-    {
-        return redisTemplate.keys(pattern);
-    }
-
-
-    /**
-     * 获得键的过期时间
-     *
-     * @return 对象列表
-     */
-    public Long getCacheExpiration(final String key)
-    {
-        return redisTemplate.getExpire(key,TimeUnit.SECONDS);
-    }
-}
\ No newline at end of file
